specVersion: 0.0.1
description: "Ternoa data indexer"
repository: ''
schema: ./schema.graphql
network:
  endpoint: "ws://127.0.0.1:9944"
  #endpoint: "wss://dev.chaos.ternoa.com"
 # endpoint: "wss://chaos.ternoa.com"
  types: {
    "AccountDataOf": "AccountData",
    "Address": "MultiAddress",
    "Enclave": {
        "pubkey": "AccountId",
        "mrenclave": "Hash",
        "timestamp": "u64",
        "url": "Text"
    },
    "NFTId": "u32",
    "NFTIdOf": "NFTId",
    "NFTSeriesId": "u32",
    "NFTData": {
        "owner": "AccountId",
        "details": "NFTDetails",
        "sealed": "bool",
        "locked": "bool"
    },
    "NFTDetails": {
        "offchain_uri": "Vec<u8>",
        "series_id": "NFTSeriesId",
        "is_capsule": "bool"
    },
    "LookupSource": "MultiAddress",
    "NFTSeriesDetails": {
        "owner": "AccountId",
        "nfts": "Vec<NFTId>"
    },
    "NFTCurrencyCombined": {
        "caps": "Balance",
        "tiime": "Balance"
    },
    "NFTCurrency": {
        "_enum": {
            "Caps": "Balance",
            "Tiime": "Balance",
            "Combined": "NFTCurrencyCombined"
        }
    },
    "NFTCurrencyId": {
        "_enum": [
            "Caps",
            "Tiime"
        ]
    },
    "Request": {
        "shard": "ShardIdentifier",
        "cyphertext": "Vec<u8>"
    },
    "ShardIdentifier": "Hash",
    "MarketplaceId": "u32",
    "SaleInformation": {
        "account_id": "AccountId",
        "price": "NFTCurrency",
        "marketplace_id": "MarketplaceId"
    },
    "Status": {
        "_enum": [
            "Free",
            "Reserved"
        ]
    },
    "MarketplaceType": {
        "_enum": [
            "Public",
            "Private"
        ]
    },
    "MarketplaceInformation": {
        "kind": "MarketplaceType",
        "commission_fee": "u8",
        "owner": "AccountId",
        "allow_list": "Vec<AccountId>",
        "name": "Vec<u8>"
    }
}

dataSources:
  - name: main
    kind: substrate/Runtime
    startBlock: 1
    mapping:
      handlers:
        - handler: handleBlock
          kind: substrate/BlockHandler
        - handler: handleEvent
          kind: substrate/EventHandler
        - handler: handleCall
          kind: substrate/CallHandler
