type TransferEntity @entity {
  id: ID! #extrinsic hash or `${extrinsic hash}-${batch index}`
  blockId: String!
  blockHash: String!
  extrinsicId: String!
  isBatch: Int!
  isSudo: Int!
  isSuccess: Int!
  timestamp: Date! @index #the block which the extrinsic send number
  from: String!
  to: String!
  currency: String! #the currency of the transfer
  amount: String! #the amount of the transfer
}

type SerieEntity @entity {
  id: ID!
  owner: String! @index
  locked: Boolean!
  createdAt: Date!
  updatedAt: Date!
}

type NftEntity @entity {
  id: ID!
  serie: SerieEntity!
  nftId: String!
  nftIpfs: String!
  capsuleIpfs: String
  isCapsule: Boolean!
  frozenCaps: String!
  timestampList: Date @index
  currency: String! #the currency of the transfer
  price: String #the price of the nft
  roundedPrice:Float #the rounded price of the nft
  priceTiime: String #the price of the nft
  roundedPriceTiime:Float #the rounded price of the nft in tiime
  listed: Int!
  isLocked: Boolean!
  timestampBurn: Date @index #when nft is burned
  owner: String! @index
  creator: String! @index
  marketplaceId: String
  createdAt: Date!
  updatedAt: Date!
}

type NftTransferEntity @entity {
  id: ID!
  blockId: String!
  extrinsicId: String!
  nft: NftEntity!
  seriesId: String!
  from: String! @index
  to: String! @index
  timestamp: Date! @index
  typeOfTransaction: String!
  amount: String!
}

type AccountEntity @entity {
  id: ID!
  capsAmount: String #transferable
  capsAmountFrozen: String
  capsAmountTotal: String
  tiimeAmount: String
  createdAt: Date!
  updatedAt: Date!
}

type MarketplaceEntity @entity {
  id: ID!
  owner: String!
  kind: String!
  commissionFee: String!
  name: String!
  uri: String
  logoUri: String
  createdAt: Date!
  updatedAt: Date!
}

type AssociatedAccountEntity @entity {
  id: ID!
  accountName: [String]!
  accountValue: [String]!
  createdAt: Date!
  updatedAt: Date!
}