type TransferEntity @entity {
  id: ID!
  blockId: String!
  blockHash: String!
  extrinsicId: String!
  isSuccess: Boolean!
  timestamp: Date! @index
  from: String!
  to: String!
  currency: String!
  amount: String!
  amountRounded: Float!
}

type CollectionEntity @entity {
  id: ID!
  collectionId: String!
  owner: String @index
  offchainData: String!
  nfts: [String]!
  nbNfts: Int!
  limit: Int
  hasReachedLimit: Boolean!
  isClosed: Boolean!
  timestampCreate: Date! @index
  timestampBurn: Date @index
  timestampClose: Date @index
  timestampLimit: Date @index
}

type NftEntity @entity {
  id: ID!
  nftId: String!
  collection: CollectionEntity
  owner: String @index
  creator: String! @index
  offchainData: String!
  royalty: Float!
  mintFee: String!
  mintFeeRounded: Float
  isCapsule: Boolean!
  isSecret: Boolean!
  delegatee: String @index
  isDelegated: Boolean!
  isSoulbound: Boolean!
  listedForSale: Boolean!
  isRented: Boolean!
  rentee:String
  rentalContract: RentEntity
  price: String
  priceRounded: Float
  marketplaceId: String
  createdAt: Date!
  updatedAt: Date!
  timestampCreate: Date! @index
  timestampBurn: Date @index
  timestampList: Date @index
}

type NftOperationEntity @entity {
  id: ID!
  blockId: String!
  extrinsicId: String!
  nft: NftEntity!
  from: String @index
  to: String @index
  collectionId: String @index
  commissionFeeType: String
  commissionFee: String
  commissionFeeRounded: Float
  listingFeeType: String
  listingFee: String
  listingFeeRounded: Float
  price: String
  priceRounded: Float
  royalty: Float
  royaltyCut: String
  royaltyCutRounded: Float
  marketplaceId: String
  marketplaceCut: String
  marketplaceCutRounded: Float
  timestamp: Date! @index
  typeOfTransaction: String!
}


type RentEntity @entity {
  id: ID!
  nftId: String!
  hasStarted: Boolean!
  hasEnded: Boolean!
  isExpired: Boolean!
  renter: String! @index
  rentee: String @index
  startBlockId: String
  durationType: String!
  blockDuration: Int
  blockSubscriptionRenewal: Int 
  nbSubscriptionRenewal: Int
  acceptanceType: String!
  acceptanceList: [String]
  revocationType: String!
  revokedBy: String
  rentFeeType: String!
  rentFee: String!
  rentFeeRounded: Float!
  rentOffers: [String] #rent offers empty when an offer is accepted ?
  nbRentOffers: Int
  areTermsAccepted: Boolean
  nbTermsUpdate: Int
  renterCancellationFeeType: String
  renterCancellationFee: String
  renterCancellationFeeRounded: Float
  renteeCancellationFeeType: String
  renteeCancellationFee: String
  renteeCancellationFeeRounded: Float
  timestampCreate: Date! @index
  timestampStart: Date @index
  timestampLastSubscriptionRenewal: Date
  timestampNextSubscriptionRenewal: Date
  timestampLastTermsUpdate: Date
  timestampLastOffer: Date
  timestampEnd: Date
  timestampRevoke: Date
  timestampExpire: Date
}

type MarketplaceEntity @entity {
  id: ID!
  marketplaceId: String! @index
  owner: String! @index
  kind: String!
  commissionFeeType: String
  commissionFee: String
  commissionFeeRounded: Float 
  listingFeeType: String
  listingFee: String
  listingFeeRounded: Float
  accountList: [String]
  offchainData: String
  createdAt: Date!
  updatedAt: Date!
}

type AccountEntity @entity {
  id: ID!
  capsAmount: String
  capsAmountFrozen: String
  capsAmountTotal: String
  capsAmountRounded: Float
  capsAmountFrozenRounded: Float
  capsAmountTotalRounded: Float
  createdAt: Date!
  updatedAt: Date!
}

type AggregateResultEntity @entity {
  id: ID!
  occurences: Int!
}
