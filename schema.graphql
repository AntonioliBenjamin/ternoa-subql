type TransferEntity @entity {
  id: ID!
  blockId: String!
  blockHash: String!
  extrinsicId: String!
  isSuccess: Boolean!
  timestamp: Date! @index
  from: String!
  to: String!
  currency: String!
  amount: String!
  amountRounded: Float!
}

type SerieEntity @entity {
  id: ID!
  owner: String! @index
  locked: Boolean!
  createdAt: Date!
  updatedAt: Date!
}

type NftEntity @entity {
  id: ID!
  serie: SerieEntity!
  nftId: String!
  nftIpfs: String!
  capsuleIpfs: String
  isCapsule: Boolean!
  frozenCaps: String!
  timestampList: Date @index
  currency: String!
  price: String
  priceRounded:Float
  listed: Int!
  isLocked: Boolean!
  timestampBurn: Date @index
  timestampCreate: Date! @index
  owner: String! @index
  creator: String! @index
  marketplaceId: String
  createdAt: Date!
  updatedAt: Date!
}

type NftTransferEntity @entity {
  id: ID!
  blockId: String!
  extrinsicId: String!
  nft: NftEntity!
  seriesId: String!
  from: String! @index
  to: String! @index
  timestamp: Date! @index
  typeOfTransaction: String!
  amount: String!
  amountRounded: Float!
  marketplaceId: String
}

type AccountEntity @entity {
  id: ID!
  capsAmount: String
  capsAmountFrozen: String
  capsAmountTotal: String
  capsAmountRounded: Float
  capsAmountFrozenRounded: Float
  capsAmountTotalRounded: Float
  createdAt: Date!
  updatedAt: Date!
}

type MarketplaceEntity @entity {
  id: ID!
  owner: String!
  kind: String!
  commissionFee: String!
  name: String!
  uri: String
  allowList: [String]!
  disallowList: [String]!
  logoUri: String
  description: String
  createdAt: Date!
  updatedAt: Date!
}

type AssociatedAccountEntity @entity {
  id: ID!
  accountName: [String]!
  accountValue: [String]!
  createdAt: Date!
  updatedAt: Date!
}