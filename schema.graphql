type TransferEntity @entity {
  id: ID!
  blockId: String!
  blockHash: String!
  extrinsicId: String!
  isSuccess: Boolean!
  timestamp: Date! @index
  from: String!
  to: String!
  currency: String!
  amount: String!
  amountRounded: Float!
}

type CollectionEntity @entity {
  id: ID!
  collectionId: String!
  owner: String! @index
  offchainData: String!
  nfts: [String]
  limit: Int
  isClosed: Boolean!
  timestampCreate: Date! @index
  timestampBurn: Date @index
  timestampClose: Date @index
  timestampLimit: Date @index
}

type NftEntity @entity {
  id: ID!
  nftId: String!
  collectionId: String
  owner: String! @index
  creator: String! @index
  offchainData: String!
  royalty: String!
  mintFee: String!
  mintFeeRounded: Float
  isCapsule: Boolean!
  isSecret: Boolean!
  delegatee: String @index
  isDelegated: Boolean!
  isSoulbound: Boolean!
  listedForSale: Boolean!
  price: String
  priceRounded:Float
  marketplaceId: String
  createdAt: Date!
  updatedAt: Date!
  timestampCreate: Date! @index
  timestampBurn: Date @index
  timestampList: Date @index
}

type NftOperationEntity @entity {
  id: ID!
  blockId: String!
  extrinsicId: String!
  nft: NftEntity!
  from: String! @index
  to: String @index
  collectionId: String @index
  commissionFee: String
  listingFee: String
  price: String
  priceRounded:Float
  royalty: Float
  marketplaceCut:String
  royaltyCut:String
  commissionFeeRounded: Float
  listingFeeRounded: Float
  marketplaceCutRounded:Float
  royaltyCutRounded:Float
  marketplaceId: String
  timestamp: Date! @index
  typeOfTransaction: String! #create, burn, transfer, sell, list, delegate, addToCollection, unlist, setRoyalty
}

type MarketplaceEntity @entity {
  id: ID!
  marketplaceId: String!
  owner: String!
  kind: String!
  commissionFee: String
  listingFee:String
  accountList: [String]
  offchainData: String
  createdAt: Date!
  updatedAt: Date!
}

type AccountEntity @entity {
  id: ID!
  capsAmount: String
  capsAmountFrozen: String
  capsAmountTotal: String
  capsAmountRounded: Float
  capsAmountFrozenRounded: Float
  capsAmountTotalRounded: Float
  createdAt: Date!
  updatedAt: Date!
}

type AggregateResultEntity @entity {
  id: ID!
  occurences: Int!
}
