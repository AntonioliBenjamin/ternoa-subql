type BlockEntity @entity{
  id: ID!
  number: Int!
  hash: String!
  timestamp: Date!
  parentHash: String!
  stateRoot: String!
  extrinsicsRoot: String!
  runtimeVersion: Int!
  nbExtrinsics: Int!
  Author: String
  sessionId: Int
}

type ExtrinsicEntity @entity{
  id: ID!
  block: BlockEntity!
  extrinsicIndex: Int!
  hash: String!
  timestamp: Date!
  module: String!
  call: String!
  description: String
  signer: String!
  isSigned: Boolean!
  signature: String!
  nonce: Int!
  success: Boolean!
  argsName: [String]!
  argsValue: [String]!
  nbEvents: Int!
}

type EventEntity @entity {
  id: ID!
  block: BlockEntity!
  extrinsicId: String
  eventIndex: Int!
  module: String!
  call: String!
  description: String
  argsName: [String]!
  argsValue: [String]!
}

type TransferEntity @entity {
  id: ID! #extrinsic hash or `${extrinsic hash}-${batch index}`
  block: BlockEntity!
  blockHash: String!
  extrinsic: ExtrinsicEntity!
  isBatch: Int!
  isSudo: Int!
  isSuccess: Int!
  timestamp: Date! #the block which the extrinsic send number
  from: String!
  to: String!
  currency: String! #the currency of the transfer
  amount: String! #the amount of the transfer
}

type NftEntity @entity {
  id: ID!
  nftId: String
  uri: String
  timestampList: Date
  currency: String! #the currency of the transfer
  price: String #the price of the nft
  priceTiime: String #the price of the nft
  listed: Int!
  timestampBurn: Date #when nft is burned
  owner: String!
  creator: String!
  serieId: String! #for series of nfts
  marketplaceId: String
}

type NftTransferEntity @entity {
  id: ID!
  block: BlockEntity!
  extrinsic: ExtrinsicEntity!
  nft: NftEntity!
  from: String!
  to: String!
  timestamp: Date!
  typeOfTransaction: String!
  amount: String!
}

type AccountEntity @entity {
  id: ID!
  capsAmount: String #transferable
  capsAmountFrozen: String
  capsAmountTotal: String
  tiimeAmount: String
}


